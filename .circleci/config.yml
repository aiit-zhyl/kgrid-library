version: 2
jobs:

  ##############
  # Build job uses a go cli tool to create a github release
  ##############
  build:

    working_directory: ~/kgrid

    docker:
      - image: circleci/openjdk:8-jdk

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      #must run install to ensure multi module dependencies(shelf-api) are cached
      - run: mvn -DskipTests clean install dependency:resolve-plugins dependency:go-offline -s .circleci/settings.xml

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      - run:
          name: Deploy/Release
          command: |
             if [ $RELEASE ]; then
                git config --global user.email "$GIT_USER_EMAIL"
                git config --global user.name "$GIT_USER_NAME"
                TAG_NAME="kgrid-library-parent-$RELEASE"
                mvn release:clean release:prepare -B  -DscmCommentPrefix="Release [skip ci] " -DreleaseVersion=$RELEASE -DdevelopmentVersion=$NEXT release:perform -P ci -s .circleci/settings.xml
                curl -X POST "https://api.github.com/repos/kgrid/kgrid-library/releases?access_token=$GITHUB_TOKEN" \
                    -H 'Content-Type: application/json' -d "{\"tag_name\":\"$TAG_NAME\"}"
                RELEASE_ID=$(curl -s https://api.github.com/repos/kgrid/kgrid-library/releases/latest | jq -r ".id")
                curl -X POST "https://uploads.github.com/repos/kgrid/kgrid-library/releases/$RELEASE_ID/assets?access_token=$GITHUB_TOKEN&name=$TAG_NAME.jar" \
                    -H "Content-Type: application/octet-stream" \
                    --data-binary "@application/target/$TAG_NAME.jar"
             else
               mvn package -s .circleci/settings.xml
               DOWNLOAD_URL=$(curl -s https://api.github.com/repos/kgrid/mopen-opioid-collection/releases/latest | jq -r ".assets[].browser_download_url") && curl -L -O $DOWNLOAD_URL
               DOWNLOAD_URL=$(curl -s https://api.github.com/repos/kgrid/CPIC-objects/releases/latest | jq -r ".assets[].browser_download_url") && curl -L -O $DOWNLOAD_URL
               unzip -o opioid-shelf.zip -d application/etc
               unzip -o cpic-shelf.zip -d application/etc
               HEROKU_API_KEY=$HEROKU_API_KEY mvn clean heroku:deploy -s .circleci/settings.xml -pl application
             fi

      # save test results
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: application/target